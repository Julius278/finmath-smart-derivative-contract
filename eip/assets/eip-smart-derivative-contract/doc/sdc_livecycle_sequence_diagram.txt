# use this code as input on https://sequencediagram.org/

title SmartDerivativeContract with ERC20-token and off-chain valuation service

	actor CP1
	actor CP2
participantgroup #lightgrey **on-chain**
	participant SDC

    participant LiqidityToken
end
participantgroup #lightgrey **off-chain**
	participant EventHandler
	participant ValuationService

end

activate EventHandler
activate LiqidityToken
activate ValuationService

activate CP1
activate CP2

seq Initialize Trade
CP1 ->LiqidityToken: transfers liquidity
CP2 ->LiqidityToken: transfers liquidity
CP1 ->SDC: tx 'deploy' a SDC with token address
activate SDC
CP1 ->LiqidityToken: tx 'allowance' for SDC address
CP2 ->LiqidityToken: tx 'allowance' for SDC address
CP1 ->SDC: tx 'inceptTrade' wit trade data

SDC-->EventHandler: emit TradeIncepted
== TradeState 'Incepted' ==
CP2->SDC: tx 'confirmTrade' with id and tradedata
SDC->SDC: validate tradedata

SDC-->EventHandler: emit TradeConfirmed

== TradeState 'Confirmed' ==

SDC ->LiqidityToken: tx 'transferFrom' termination fees to SDC address for CP1 and CP2
SDC-->EventHandler: emit TradeActivated

==  TradeState 'Active' ==
end

loop Every Settlement

==ProcessState 'AwaitingFunding' ==

CP2 -> SDC: tx 'initiatePrefunding'
== ProcessState 'Funding' ==
SDC->SDC: determine gap amounts to refund margin buffer
SDC ->LiqidityToken: tx 'transferFrom': gap amount to SDC address from CP1 and CP2
SDC-->EventHandler: emit ProcessFunded


==ProcessState 'Funded' ==

CP1->SDC: tx: 'initiateSettlement'

== ProcessState 'ValuationAndSettlement' ==
SDC-->EventHandler:emit ProcessSettlementRequest

EventHandler->ValuationService: request valuation data
ValuationService->EventHandler: return valuation data
EventHandler->SDC: callback: tx 'performSettlement'
SDC->SDC:checks settlement amount against buffers
SDC->LiqidityToken: tx 'transfer' settlement amount from SDC address to receiving party
SDC-->EventHandler: emit ProcessSettled


end